name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main1

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: shopify
  ECS_SERVICE: shopify-service
  ECS_CLUSTER: shopify
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: "shopify"

jobs:
  sonarcloud:
    name: üîç SonarCloud Analysis
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: üõ†Ô∏è SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    name: üöÄ Deploy to ECS
    runs-on: ubuntu-latest
    needs: [sonarcloud]
    environment: development

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v3

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîë Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: üèóÔ∏è Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          
          echo "üîç Running Trivy scan..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --severity CRITICAL,HIGH --exit-code 0

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: üìù Render ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: üöÄ Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  zap_scan:
    name: ‚ö° ZAP DAST Scan
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üï∑Ô∏è Run ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          token: ${{ secrets.GIT_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'http://shopify-lb-1127977734.us-east-1.elb.amazonaws.com'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
